<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
 
     <!-- 注解扫描包 控制层 
                              配置注解扫描 并且只扫描控制层
     -->
     <context:component-scan base-package="com.jk.*.controller" />
     <!-- 开启注解 
                              开启springMVC的注解驱动
     -->
     <mvc:annotation-driven />
     <!--
         配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd
    
     <mvc:resources mapping="/img/**" location="/img/" />
     <mvc:resources mapping="/js/**" location="/js/" />
     <mvc:resources mapping="/css/**" location="/css/" />
     <mvc:resources mapping="/html/**" location="/html/" />
 
  -->
 
     <!-- 
                                配置spring中的视图解析器 能够让springmvc像struts2一样跳转页面
                                定义跳转的文件的前后缀 ，视图模式配置-->
     <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
      <bean id="viewResolver"
         class="org.springframework.web.servlet.view.InternalResourceViewResolver">
         <!--prefix 前缀  
             suffix 后缀
                                       通过配置路径的前缀和后缀然后再和springMVC控制层返回的字符串 拼接成完整的路径进行跳转
                                        假设controller方法return "test"字符串 则拼接后的路径为
             /WEB-INF/view/test.jsp
         -->
         <property name="prefix" value="/WEB-INF/" />
         <property name="suffix" value=".jsp" />
     </bean> 
    <bean id="threadPoolTaskExecutor"
        class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="10" />
 
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="50" />

        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
            <property name="queueCapacity" value="1000" /> -->
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300" />
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>
     
     
<!--      配置一个拦截器集合  -->
   <mvc:interceptors>  
     	<mvc:interceptor>
     	 <mvc:mapping path="/**" />
     	 <mvc:exclude-mapping path="/login/**" />
     	 <mvc:exclude-mapping path="/butt/**" />
     	 <mvc:exclude-mapping path="/test/**" />
     	 <bean class="com.jk.user.interceptor.LoginInterceptor"/>  
     	</mvc:interceptor>
<!--       使用bean定义一个Interceptor，直接定义在mvc:interceptors根标签下面的Interceptor将拦截所有的请求 
                                 只要是springMVC的访问请求 都会被拦截到  -->
    </mvc:interceptors>

<!--         <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> -->
<!--           上传大小单位为b    -->
<!--           <property name="defaultEncoding"><value>UTF-8</value></property>  -->
<!--           	<property name="maxUploadSize" value="10485760000" />   -->
<!-- 			<property name="maxInMemorySize" value="40960" />   -->
<!--     </bean> -->
 </beans>